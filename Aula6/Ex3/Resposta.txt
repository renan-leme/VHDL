%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Pergunta %%%%%%%%%%%%%%%%%%%%%%%%
Por que o contador do exemplo 2 usa 29 bits?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Resposta %%%%%%%%%%%%%%%%%%%%%%%%
Básicamente o contador possui 29 bits para que os leds acendam de forma mais lenta usando-se os bits mais significativos.
Pode-se notar no código abaixo, que os leds são ligados apenas quando há contagem nos bits mais significativos (bits 29, 28, 27 e 26).

2^26 = 67.108.864  => O led referente ao bit 26 será ligado no tempo em segundos dado por  67.108.864 x período clk e ficará ligado até o próximo bit ser acionado
2^27 = 134.217.728 => O led referente ao bit 27 será ligado no tempo em segundos dado por 134.217.728 x período clk e ficará ligado até o próximo bit ser acionado
2^28 = 268.435.456 => O led referente ao bit 27 será ligado no tempo em segundos dado por 268.435.456 x período clk e ficará ligado até o próximo bit ser acionado
2^29 = 536.870.912 => O led referente ao bit 27 será ligado no tempo em segundos dado por 536.870.912 x período clk e ficará ligado até o próximo bit ser acionado

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Código %%%%%%%%%%%%%%%%%%%%%%%%
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.all;

-- Counter
entity counter is
    port (
        CLK_in      : in std_logic;
		stop		: in std_logic;
        led         : out std_logic_vector(3 downto 0)
    );
end counter;

architecture rtl of counter is

    signal iCounter : unsigned(28 downto 0);
	
begin

	
    -- Counter process
    COUNT_SHIFT: process (clk_in)
    begin
        if (clk_in'event and clk_in='1') then           
            if stop = '0' then else                                    -- Count down
				iCounter <= iCounter + 1;
            end if;
        end if;
    end process;
	led <= std_logic_vector(iCounter(iCounter'high downto iCounter'high - 3));

end rtl;